package models

const (
	ActionCheckIn          = "/checkin"
	ActionUpdate            = "/open"
	CommandStart            = "/start"
	CommandBack             = "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è"
	Unknown                 = "unknown"
	CommandMadeMistake      = "–û—à–∏–±—Å—è"
	CommandLastPage         = "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–∫–Ω–æ"
	ENV                     = "LOCAL"
	OpenLastNotification    = "/OpenLastNotification"
	CommandOpen             = "/open"
	CommandWillLate         = "üò¨ –û–ø–æ–∑–¥–∞—é"
	CommandLateButInOffice  = "üè¢ –í –æ—Ñ–∏—Å–µ, –Ω–æ –æ–ø–æ–∑–¥–∞–ª"
	CommandCantCome         = "üö´ –ù–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏"
	CommandOutOffice        = "üèÉ‚Äç‚ôÇ –ü–æ –ª–∏—á–Ω—ã–º –¥–µ–ª–∞–º"
	CommandMeetingOutOffice = "üëî –ü–æ –¥–µ–ª–∞–º –æ—Ñ–∏—Å–∞"
	CommandRemoteWork       = "üè† –†–∞–±–æ—Ç–∞—é –∏–∑ –¥–æ–º–∞"

	CommandOverslept        = "–ü—Ä–æ—Å–ø–∞–ª"
	CommandTransportProblem = "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
	CommandWasInUniversity  = "–í —É–Ω–∏–≤–µ—Ä–µ –±—ã–ª"
	CommandWasInHospital    = "–ë—ã–ª —É –≤—Ä–∞—á–∞"

	CommandMyChoice      = "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
	CommandAnotherReason = "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞"

	GetTimeHourInterface   = "–û–ø—Ü–∏—è –≤—Ä–µ–º—è —á–∞—Å—ã"
	GetTimeMinuteInterface = "–û–ø—Ü–∏—è –≤—Ä–µ–º—è –º–∏–Ω—É—Ç—ã"

	CommandToPartner         = "–ï–¥—É –∫ –ø–∞—Ä—Ç–Ω–µ—Ä—É"
	CommandBuyGoodsForOffice = "–ï–¥—É –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–∏—Å–∞"
	CommandToNationalBank    = "–ù—É–∂–Ω–æ –≤ –ù–∞—Ü –±–∞–Ω–∫"
	CommandToTaxInspection   = "–ù—É–∂–Ω–æ –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é"

	CommandToday    = "–°–µ–≥–æ–¥–Ω—è"
	CommandTomorrow = "–ó–∞–≤—Ç—Ä–∞"

	CommandHouseholdWork            = "–ü–æ –¥–æ–º–∞—à–Ω–∏–º –¥–µ–ª–∞–º"
	CommandExam                     = "–≠–∫–∑–∞–º–µ–Ω"
	CommandTiredWantRest            = "–£—Å—Ç–∞–ª, —á—É—Ç—å –æ—Ç–¥–æ—Ö–Ω—É"
	CommandGetTimeCantComeInterface = "–î–∞–π –≤—Ä–µ–º—è –Ω–µ—Å–º–æ–≥—É –ø—Ä–∏–¥—Ç–∏"
)

var (
	CommentReason     string
	ArrivalTimeHour   string
	ArrivalTimeMinute string
	ArrivalTime       string
	MsgID             string
)
var (
	ActiveOutOfOffice        bool
	ActiveMeetingOutOfOffice bool
	ActiveLate               bool
	ActiveLateButInOffice    bool
	ActiveRemoteWork         bool
	ActiveCantCome           bool
)

type User struct {
	ID       int    `json:"id"`
	Username string `json:"username"`
	ChatID   int64  `json:"chat_id"`
	UserID   int    `json:"user_id"`
	State    State  `json:"state"`
	IsActive bool   `json:"is_active"`
}

func (uc *User) SetState(state string) {
	switch state {
	case "late":
		uc.State = CreateLateStateInstance()
	case "lateButInOffice":
		uc.State = CreateLateButInOfficeStateInstance()
	case "initial":
		uc.State = CreateInitialStateInstance()
	case "timeCantCome":
		uc.State = CreateCantComeStateInstance()
	case "reasonCantCome":
		uc.State = CreateReasonCantComeStateInstance()
	case "meetingOutOffice":
		uc.State = CreateMeetingOutOfficeStateInstance()
	case "remoteWork":
		uc.State = CreateRemoteWorkStateInstance()
	case "TimeHourState":
		uc.State = CreateTimeHourStateInstance()
	case "TimeMinuteState":
		uc.State = CreateTimeMinuteStateInstance()
	case "AnotherReason":
		uc.State = CreateAnotherReasonStateInstance()
	case "MyChoice":
		uc.State = CreateMyChoiceStateInstance()
	default:
		uc.State = CreateInitialStateInstance()
	}

}
